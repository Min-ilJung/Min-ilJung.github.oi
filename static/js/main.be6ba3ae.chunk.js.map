{"version":3,"sources":["movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","movie","react_default","a","createElement","className","MoviePoster","poster","medium_cover_image","alt","title","title_english","genres","map","genre","index","MovieGener","key","lib_default","text","summary","maxLine","ellipsis","trimRight","basedOn","_ref2","src","_ref3","propType","PropTypes","string","isRequired","App","state","_renderMovies","_this","movies","src_movie_0","id","_getMovies","_callee","apiMovies","regenerator_default","wrap","_context","prev","next","_callApi","sent","console","log","setState","stop","this","_callee2","res","json","_context2","fetch","abrupt","data","t0","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be6ba3ae.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport './movie.css'\r\n\r\n//props는 부모계층에서 값을 전달 받을때 사용\r\nfunction Movie({movie}){\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={movie.medium_cover_image} alt={movie.title}/>\r\n            </div>\r\n            <div className=\"Movie__Column\">\r\n                <h1>{movie.title_english}</h1>\r\n                <div className=\"Movie__Geners\">\r\n                    {movie.genres.map((genre, index) => <MovieGener genre={genre} key={index}/>)}\r\n                </div> \r\n                <p className=\"Movie__Synopsis\">\r\n                   <LinesEllipsis\r\n                        text = {movie.summary}\r\n                        maxLine='3'\r\n                        ellipsis=\"...\"\r\n                        trimRight\r\n                        basedOn=\"letters\"\r\n                    />\r\n                </p> \r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){\r\n    return(\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\r\n    )\r\n}\r\n\r\nfunction MovieGener({genre}){\r\n    return(\r\n        <span className=\"Movie__Genre\">{genre} </span>\r\n    )\r\n}\r\n\r\nMovie.propType = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propType = {\r\n    poster: PropTypes.string.isRequired\r\n}\r\n\r\n/*\r\n<div className=\"Movie__Columns\">\r\n    <h1>{movie.rating}</h1>\r\n</div> \r\nclass Movie extends Component {\r\n    static propTypes={\r\n        title: PropTypes.string.isRequired,\r\n        poster: PropTypes.string.isRequired\r\n    }\r\n\r\n    render(){\r\n        //console.log(this.props);\r\n        return(\r\n            <div>\r\n                <MoviePoster poster={this.props.poster}/>\r\n                <h1>{this.props.title}</h1>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass MoviePoster extends Component{\r\n    static propTypes={\r\n         poster: PropTypes.string.isRequired\r\n    }\r\n   render(){\r\n      return(\r\n        <img src={this.props.poster} width=\"250\" alt=\"movie poster\"/>\r\n      );\r\n    }\r\n  }\r\n*/\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './movie';\n\nclass App extends Component {\n  //#####################  React Lifecycle #############################\n  // Render: componentWillMount() -> render() -> componentDidMount()\n  // Update: componentWillReciveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDIdUpdate()\n  state = {}\n\n  componentDidMount(){\n    this._getMovies();\n\n  }\n\n  _renderMovies = () =>{\n    //const movies = this.state.movies.map((movie,index) => {\n    const movies = this.state.movies.map(movie => {\n      //return <Movie title={movie.title_english} poster={movie.medium_cover_image} genres = {movie.genres}  summary = {movie.summary} key={movie.id} />\n      return <Movie movie={movie} key={movie.id} />\n    })\n    return movies\n  } \n\n   _getMovies = async () => {\n    const apiMovies =  await this._callApi()\n    console.log(apiMovies);\n    this.setState({\n      movies : apiMovies\n    })\n  }\n  \n  _callApi = async () =>{\n    try {\n      const res = await fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count&page=1&limit=10');\n      const json = await res.json();\n      return json.data.movies;\n    }\n    catch (err) {\n      return console.log(err);\n    }\n  }\n\n  render() {\n    const { movies } = this.state;\n    console.log(\"render\");\n    return (\n      <div className = {movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : \"Loading...\"}\n      </div>\n    );\n  }\n}\n\n/*\ncomponentDidMount(){\n  console.log(\"componentDidMount\");\n  setTimeout(() => {\n    this.setState({\n      movies: [\n        {\n           title:  \"Matrix\",\n          poster:  \"http://www.televi.net/korea/movie/poster/big/forg/matrix.jpg\"\n        },\n        {\n          title:  \"Full Metal jaket2\",\n          poster:  \"https://dhgywazgeek0d.cloudfront.net/watcha/image/upload/c_fill,h_700,q_80,w_490/v1485423697/bvacgjpzkogqdbcbo506.jpg\"\n        },\n        {\n          title:  \"Oldboy\",\n          poster:  \"http://www.paekche.ac.kr/data/board/19/200811204501310-%EC%98%AC%EB%93%9C%EB%B3%B4%EC%9D%B4(6370).jpg\"\n        },\n        {\n          title:  \"Star was\",\n          poster:  \"https://images-na.ssl-images-amazon.com/images/I/51gl8QQETFL._SY445_.jpg\"\n        },\n        {\n          title:\"Transformers\",\n          poster:\"https://mir-s3-cdn-cf.behance.net/project_modules/max_1200/da3ca142164091.57c35e9f49a90.jpg\"\n        }\n      ]\n    })\n  }, 3000);\n}\n*/\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}